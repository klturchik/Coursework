/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.File;
import java.io.FileNotFoundException;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import static org.lwjgl.opengl.GL11.*;
import org.lwjgl.input.Keyboard;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *  created by Kyle Turchik, 10/22/16
 */
public class Project2 {

    // Main Window settings
    public static final int WINDOW_WIDTH = 640;
    public static final int WINDOW_HEIGHT = 480;
    public static final String WINDOW_TITLE = "Kyle Turchik - Project 2";
    
    ArrayList pInstr = new ArrayList();
    ArrayList tInstr = new ArrayList();
    
    public static int pCount = 0;
    public static int tCount = 0;
    
/*  public static String pString = "";
    public static String tString = "";
    public static int arrCounter;
    public static int pCounter = 0;
    public static int tCounter = 0;*/

    //
    //
    //
    private void printE(edges[] x) {
        for (int i = 0; i < x.length; i++) {
            System.out.println("Printing : " + x[i].ymin + "  " + x[i].ymax + "  " + x[i].xval + "  " + x[i].m);
        }
        System.out.println();
    }
    //
    //
    //
    
    // method: main
    // purpose: basic driver method that starts the program
    public static void main(String[] args) throws Exception {
        Project2 proj = new Project2();
        proj.start();
    }
    
        //method: createWindow
    //purpose: creates the window, specifying no fullscreen and its resolution, title
    private void createWindow() throws Exception {
        Display.setFullscreen(false);
        Display.setDisplayMode(new DisplayMode(WINDOW_WIDTH, WINDOW_HEIGHT));
        Display.setTitle(WINDOW_TITLE);
        Display.create();
    }

    //method: initGL
    //purpose: initialize background color, camera, matrix 
    private void initGL() {
        glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(-320, 320, -240, 240, 1, -1);
        glMatrixMode(GL_MODELVIEW);
        glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
    }

    private void start() throws Exception {
        try{
            createWindow();
            initGL();

            File file = new File("coordinates.txt");

            while(!Keyboard.isKeyDown(Keyboard.KEY_ESCAPE)) {
                //render
                readFile(file); 
                Display.update();
                Display.sync(60);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        Display.destroy();
    }
    
    // method: readFile
    // purpose: sequentially reads in data line by line from a premade file
    // then performs commands based on the data
    private void readFile(File file) throws Exception {
        try{
            String line, set[];
            Scanner reader = new Scanner(file);

            while (reader.hasNext()) {
                line = reader.nextLine();
                System.out.println(line);
                
                set = line.split(" ");
                if (set[0].equals("P")) {
                    
                    while(reader.hasNext()){
                        set = line.split(" ");
                        
                        if(set[0].equals("T")){
                            break;
                        } else{
                            pInstr.add(line);                           
                        }
                        line = reader.nextLine();
                        System.out.println(line);
                    }
                    System.out.println(pInstr);
                }
                if (set[0].equals("T")) {
                    while(reader.hasNext()){
                        set = line.split(" ");
                        
                        if(set[0].equals("P")){
                            break;
                        } else{
                            tInstr.add(line);                           
                        }
                        line = reader.nextLine();
                        System.out.println(line);
                    }
                    System.out.println(tInstr);
                }
                                    //createPoly(set);
            }


            System.out.println("End : Count = 0");
            pCount = 0;
        } catch(Exception e){
            System.out.println("Error: " + e.getMessage());
        }
    }



    private void createPoly(String[] set) {
        polygon shape = new polygon();
        String[] setT = null;
        String type = (String) pInstr.get(pCount);
        shape.colors[0] = Float.parseFloat(set[1]);
        shape.colors[1] = Float.parseFloat(set[2]);
        shape.colors[2] = Float.parseFloat(set[3]);
        
        while (pCount < pInstr.size()) {
            type = (String) pInstr.get(pCount);
            set = (type.split(" "));
            pCount++;
            
            if (set[0].equals("T") == false) {
                System.out.println("inside " + type);
                shape.coords.add(Integer.parseInt(set[0]));
                shape.coords.add(Integer.parseInt(set[1]));
            } else {
                glPushMatrix();
                while (set[0].equals("P") == false && pCount < pInstr.size()) {
                    type = (String) pInstr.get(pCount);
                    set = (type.split(" "));
                    pCount++;
                    if (set[0].equals("P") == false) {
                        tInstr.add(set);
                    } else if ((set[0].equals("P"))) {
                        System.out.println("sending " + set[0]);
                        for (int i = tInstr.size()-1; i >= 0; i--) {
                            setT = (String[]) tInstr.get(i);

                            System.out.println("inside2 " + setT[0]);
                            if (setT[0].equals("t")) {
                                System.out.println("translating " + setT);
                                glTranslatef(Integer.parseInt(setT[1]), Integer.parseInt(setT[2]), 1);
                            } else if (setT[0].equals("r")) {
                                System.out.println("rotating " + setT);
                                glRotatef(Integer.parseInt(setT[1]), Integer.parseInt(setT[2]), Integer.parseInt(setT[3]), 1);
                            } else {
                                System.out.println("scaling " + setT);
                                glRotatef(Float.parseFloat(setT[1]), Float.parseFloat(setT[2]), Float.parseFloat(setT[3]), 1);
                            }
                        }
                    }
                }
                glRotatef(43, 50, 190, 1);
                drawPoly(shape);
                glPopMatrix();

                System.out.println("sending " + set[0]);
                if (set[0].equals("P")) {
                    createPoly(set);
                }
            }
        }
    }

    private edges[] sortY(edges[] sortE) {
        edges[] ret = new edges[sortE.length];
        System.out.println("sorting ");
        edges temp = new edges();
        int counter = 0;
        
        for (int j = 0; j < sortE.length; j++) {
            for (int i = j + 1; i < sortE.length; i++) {
                if (sortE[j].ymin > sortE[i].ymin) {
                    temp = sortE[i];
                    sortE[i] = sortE[j];
                    sortE[j] = temp;;
                }
                if (sortE[j].ymin == sortE[i].ymin) {
                    if (sortE[j].xval > sortE[i].xval) {
                        temp = sortE[i];
                        sortE[i] = sortE[j];
                        sortE[j] = temp;
                    }
                }
            }
            ret[counter] = sortE[j];
            counter++;
        }
        return ret;
    }

    private edges[] sortX(edges[] sortE) {
        edges[] ret = new edges[sortE.length];
        edges temp = new edges();
        int counter = 0;
        
        for (int j = 0; j < sortE.length; j++) {
            for (int i = j + 1; i < sortE.length; i++) {

                if (sortE[j].xval > sortE[i].xval) {
                    temp = sortE[i];
                    sortE[i] = sortE[j];
                    sortE[j] = temp;
                }
            }
            ret[counter] = sortE[j];
            counter++;
        }
        return ret;
    }

    private void drawPoly(polygon thing1) {
        int[] xList = new int[thing1.coords.size() / 2];
        int[] yList = new int[thing1.coords.size() / 2];
        edges[] all_edges = new edges[xList.length];
        
        for (int i = 0; i < (thing1.coords.size()) / 2; i++) {
            all_edges[i] = new edges();
            xList[i] = (int) thing1.coords.get(2 * i);
            yList[i] = (int) thing1.coords.get((2 * i) + 1);
        }
        for (int i = 0; i < xList.length; i++) {
            if (i == xList.length - 1) {
                if (yList[i] >= yList[0]) {
                    all_edges[i].ymax = yList[i];
                    all_edges[i].xval = xList[i];
                    all_edges[i].ymin = yList[i];
                } else {
                    all_edges[i].ymax = yList[i + 1];
                    all_edges[i].xval = xList[i];
                    all_edges[i].ymin = yList[i];
                }

            } else if (yList[i] >= yList[i + 1]) {
                all_edges[i].ymax = yList[i];
                all_edges[i].xval = xList[i + 1];
                all_edges[i].ymin = yList[i + 1];
            } else {
                all_edges[i].ymax = yList[i + 1];
                all_edges[i].xval = xList[i];
                all_edges[i].ymin = yList[i];
            }
            if (i == xList.length - 1) {
                if ((yList[0] > yList[i])) {
                    all_edges[i].m = (float) (xList[0] - xList[i]) / (yList[0] - yList[i]);
                } else if ((yList[0] < yList[i])) {
                    all_edges[i].m = (float) (xList[i] - xList[0]) / (yList[i] - yList[0]);
                } else {
                    all_edges[i].m = -9999;
                }
            } else if ((yList[i + 1] > yList[i])) {
                all_edges[i].m = (float) (xList[i + 1] - xList[i]) / (yList[i + 1] - yList[i]);
            } else if ((yList[i + 1] < yList[i])) {
                all_edges[i].m = (float) (xList[i] - xList[i + 1]) / (yList[i] - yList[i + 1]);
            } else {
                all_edges[i].m = -9999;
            }
        }
        int counter = 0;
        for (int i = 0; i < all_edges.length; i++) {
            if (all_edges[i].m != -9999) {
                counter++;
            }
            System.out.println(all_edges[i].ymin + "  " + all_edges[i].ymax + "  " + all_edges[i].xval + "  " + all_edges[i].m);
        }
        edges[] global_edges = new edges[counter];
        int countx = 0;
        for (int i = 0; i < counter; i++) {
            global_edges[i] = new edges();
            if (all_edges[i].m != -9999) {
                global_edges[countx] = all_edges[i];
                countx++;
            }
        }
        global_edges = sortY(global_edges);
        printE(global_edges);

        double ysetter = global_edges[0].ymin;
        int activeC = 0, CC = 0;
        for (int i = 0; i < global_edges.length; i++) {
            if (global_edges[i].ymin == ysetter) {
                activeC++;
            }
        }
        edges[] active_edges = new edges[activeC];
        for (int i = 0; i < global_edges.length; i++) {
            if (global_edges[i].ymin == ysetter) {
                active_edges[CC] = new edges();
                active_edges[CC] = global_edges[i];
                CC++;
            }
        }
        printE(active_edges);
        drawEdges(active_edges, global_edges, thing1.colors);
    }

    private void drawEdges(edges[] active, edges[] global, float[] color) {

        double scanline = active[0].ymin;
        glLoadIdentity();
        glColor3f(color[0], color[1], color[2]);
        glPointSize(1);
        int min = 0;
        
        while (active.length != 0) {
            active = sortX(active);
            for (int i = 0; i < active.length; i++) {
                if (i % 2 == 0) {
                    glBegin(GL_LINES);
                    glVertex2f((float) active[i].xval, (float) scanline);
                    glVertex2f((float) active[i + 1].xval, (float) scanline);
                    glEnd();
                }
                active[i].xval += active[i].m;
                if (active[i].ymax == (scanline + 1)) {
                    min++;
                    active[i] = null;
                }

            }
            int max = 0;
            for (int k = 0; k < global.length; k++) {
                if (global[k].ymin == (scanline + 1)) {
                    max++;
                }
            }

            edges[] transfer = new edges[active.length - min + max];
            min = 0;
            int tran = 0;
            for (int k = 0; k < active.length; k++) {
                if (active[k] != null) {
                    transfer[tran] = active[k];
                    tran++;
                }
            }

            for (int k = 0; k < global.length; k++) {
                if (global[k].ymin == (scanline + 1)) {
                    transfer[tran] = global[k];
                    tran++;
                }
            }
            active = transfer;
            Display.update();
            Display.sync(60);

            scanline++;
        }
    }
    
    
 /*       private void transformPoly() {
        String[] set, setT;
        String type;

//        System.out.println("TRANSFORMING");
//        = (String) holder.get(count);
//        set = (type.split(" "));
//        count++;
        while (count < instr.size()) {
            type = (String) instr.get(count);
            set = (type.split(" "));
            count++;
            if (set[0].equals("P") == false) {

//                System.out.println("hit1");
                tranH.add(set);
            } else if ((set[0].equals("P"))) {
//                System.out.println("AAA");
                for (int i = 0; i < tranH.size(); i++) {
                    setT = (String[]) tranH.get(i);

//                    System.out.println("inside2 " + setT[0]);
                    if (setT[0].equals("t")) {
//                        System.out.println("translating " + setT);
                        glTranslatef(Integer.parseInt(setT[1]), Integer.parseInt(setT[2]), 1);
                    } else if (setT[0].equals("r")) {
//                        System.out.println("rotating " + setT);
                        glRotatef(Integer.parseInt(setT[1]), Integer.parseInt(setT[2]), Integer.parseInt(setT[3]), 1);
                    } else if ((set[0].equals("s"))) {
//                        System.out.println("scaling " + setT);
                        glRotatef(Integer.parseInt(setT[1]), Integer.parseInt(setT[2]), Integer.parseInt(setT[3]), 1);
                    }
                }
            }
        }
    }*/
    
    
    public class polygon {
        
        ArrayList coords = new ArrayList<Integer>();
        float[] colors = {0, 0, 0};
    }

    public class edges {
        double ymax = 1;
        double ymin = 1;
        double xval = 1;
        double m = 1.0;

        public void edges() {
            ymax = 1;
            ymin = 1;
            xval = 1;
            m = 1;
        }
    }
}